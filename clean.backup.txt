/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.me.skyscan;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.ejb.Stateless;
import javax.jws.HandlerChain;

/**
 * @author kamal
 */
@WebService(serviceName = "SkyscanWS")
@HandlerChain(file="serversoaphandler.xml")
@Stateless()
public class SkyscanWS {
    
    HashMap<String, String> users = new HashMap();
    HashMap<Integer, Flight> flights = new HashMap();
    
    public SkyscanWS(){
        flights.put(0, new Flight("Stockholm", "Jakarta", LocalDate.of(2016,12,25), 5000));
        flights.put(1, new Flight("Stockholm", "Paris", LocalDate.of(2016,12,30), 4000));
        flights.put(2, new Flight("Stockholm", "Dubai", LocalDate.of(2016,12,26), 3000));
        flights.put(3, new Flight("Stockholm", "Berlin", LocalDate.of(2016,12,25), 2000));
        flights.put(4, new Flight("Stockholm", "Kyoto", LocalDate.of(2016,12,25), 2000));
        flights.put(5, new Flight("Jakarta", "Bandung", LocalDate.of(2016,12,25), 2000));
        flights.put(6, new Flight("Jakarta", "Jogja", LocalDate.of(2016,12,25), 2000));
        flights.put(7, new Flight("Jakarta", "Sura", LocalDate.of(2016,12,25), 2000));
        flights.put(8, new Flight("Ougadou", "Sura", LocalDate.of(2016,12,25), 20000));
        flights.put(9, new Flight("Stockholm", "Paris", LocalDate.of(2016,12,25), 4000));
        flights.put(10, new Flight("Paris", "Jakarta", LocalDate.of(2016,12,25), 4000));
        flights.put(11, new Flight("Paris", "Dubai", LocalDate.of(2016,12,25), 4000));
        flights.put(12, new Flight("Dubai", "Jakarta", LocalDate.of(2016,12,25), 2000));
        flights.put(13, new Flight("Aleppo", "Dubai", LocalDate.of(2016,12,25), 3000));
        flights.put(14, new Flight("Paris", "Aleppo", LocalDate.of(2016,12,25), 4000));
        flights.put(15, new Flight("Stockholm", "Aleppo", LocalDate.of(2016,12,24), 1500));
        
        users.put("kamal", "123");
        users.put("sharbel", "123");
    }
    
    /**
     * Web service operation
     * @param id
     * @return 
     */
    @WebMethod(operationName = "getFlightById")
    public String[] getFlightById(@WebParam(name = "id") int id) {
        //TODO write your implementation code here:
        String[] output = new String[4];
        Flight flight = flights.get(id);
        
        output[0] = flight.getFrom();
        output[1] = flight.getTo();
        output[2] = flight.getDate().toString();
        output[3] = ""+flight.getPrice();
        
        return output;
    }
    
    private HashMap<Integer, Flight> getFlightsByDeparture(String from, HashMap<Integer, Flight> input){
        
        HashMap<Integer, Flight> out = new HashMap();
        
        for(Map.Entry<Integer, Flight> entry : input.entrySet()){
            int key = entry.getKey();
            Flight flight = entry.getValue();
            
            if(flight.getFrom().equals(from)){
                out.put(key, flight);
            }
        }
        
        return out;
    }
    
    private HashMap<Integer, Flight> getFlightsByDestination(String to, HashMap<Integer, Flight> input){
        
        HashMap<Integer, Flight> out = new HashMap();
        
        for (Map.Entry<Integer, Flight> entry : input.entrySet()) {
            int key = entry.getKey();
            Flight flight = entry.getValue();
            
            if(flight.getTo().equals(to)){
                out.put(key, flight);
            }
        }
        
        return out;
    }
    
    private HashMap<Integer, Flight> getFlightsByDate(LocalDate date, HashMap<Integer, Flight> input){
        
        HashMap<Integer, Flight> out = new HashMap();
        
        for (Map.Entry<Integer, Flight> entry : input.entrySet()) {
            int key = entry.getKey();
            Flight flight = entry.getValue();
            
            if(flight.getDate().equals(date)){
                out.put(key, flight);
            }
        }
        
        return out;
    }
    
    private ArrayList<String> findAllNonDirectFlight(String from, String to, HashMap<Integer, Flight> input){
        
        ArrayList<String> output = new ArrayList();
        
        HashMap<Integer, Flight> departureFlights = this.getFlightsByDeparture(from, flights);
        HashMap<Integer, Flight> arrivalFlights = this.getFlightsByDestination(to, flights);
        
        for(Map.Entry<Integer, Flight> departureFlight : departureFlights.entrySet()) {
            int dkey = departureFlight.getKey();
            Flight df = departureFlight.getValue();
            
            for(Map.Entry<Integer, Flight> arrivalFlight : arrivalFlights.entrySet()) {
                int akey = arrivalFlight.getKey();
                Flight af = arrivalFlight.getValue();
                //output.add(""+dkey+","+akey);
//                if(dkey == akey){
//                    output.add(""+akey);
//                }
//                else 
                if(df.getTo().equalsIgnoreCase(af.getFrom())){
                    output.add(""+dkey+","+akey);
                }

            }
        }
        
        return output;
    }
    
    private Boolean isCreditCardValid(String ccNumber){
        int sum = 0;
        boolean alternate = false;
        for (int i = ccNumber.length() - 1; i >= 0; i--)
        {
                int n = Integer.parseInt(ccNumber.substring(i, i + 1));
                if (alternate)
                {
                        n *= 2;
                        if (n > 9)
                        {
                                n = (n % 10) + 1;
                        }
                }
                sum += n;
                alternate = !alternate;
        }
        return (sum % 10 == 0);
    }
    
    /**
     * Web service operation
     */
    @WebMethod(operationName = "login")
    public String login(@WebParam(name = "inputUsername") String inputUsername, @WebParam(name = "inputPassword") String inputPassword) {
        
        if(users.containsKey(inputUsername)){
            if(users.get(inputUsername).equals(inputPassword)){
                return "login success";
            }
            else{
                return "wrong password";
            }
        }
        else{
            return "we can't find that username";
        }
        
    }

    /**
     * Web service operation
     */
    @WebMethod(operationName = "checkTickets")
    public String[] checkTickets(@WebParam(name = "from") String from, @WebParam(name = "to") String to, @WebParam(name = "date") String date) {
        
        String[] output;
        HashMap<Integer, Flight> tmp = this.getFlightsByDeparture(from, flights);
        
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
        tmp = this.getFlightsByDestination(to, tmp);
        tmp = this.getFlightsByDate(LocalDate.parse(date), tmp);
        
        if(tmp.size() > 0){
            output = new String[tmp.size()];
            int i = 0;
            for (Map.Entry<Integer, Flight> entry : tmp.entrySet()) {
                int key = entry.getKey();
                Flight flight = entry.getValue();

                output[i] = key+","+flight.getFrom()+","+flight.getTo()+","+flight.getDate()+","+flight.getPrice();
                i++;
            }
        }
        else{
            output = new String[1];
            output[0] = "no flights";
        }
        
        return output;
    }
    
    /**
     * Web service operation, NEED MORE WORK ON THE LOGIC
     */
    @WebMethod(operationName = "findFlights")
    public String[] findFlights(@WebParam(name = "from") String from, @WebParam(name = "to") String to) {
       
        String[] output;
        ArrayList<String> nonDirectFlights = new ArrayList();
        HashMap<Integer, Flight> tmp = this.getFlightsByDeparture(from, flights);
        tmp = this.getFlightsByDestination(to, tmp);
        nonDirectFlights = this.findAllNonDirectFlight(from, to, tmp);

        if(tmp.size() > 0 || nonDirectFlights.size() > 0){
            output = new String[tmp.size()+nonDirectFlights.size()];
            
            int i = 0;
            if(tmp.size() > 0){
                for (Map.Entry<Integer, Flight> entry : tmp.entrySet()) {
                    int key = entry.getKey();
                    Flight flight = entry.getValue();

                    //output[i] = key+","+flight.getFrom()+","+flight.getTo()+","+flight.getDate()+","+flight.getPrice();
                    output[i] = key+"";
                    i++;
                }
            }
            
            for(int j = 0; j < nonDirectFlights.size(); j++){
                output[i+j] = nonDirectFlights.get(j);
            }
            
        }
        else{
            output = new String[1];
            output[0] = "no flights";
        }
        
        return output;
    }

    /**
     * Web service operation
     */
    @WebMethod(operationName = "bookFlight")
    public String bookFlight(@WebParam(name = "flightId") int flightId, @WebParam(name = "creditCardNo") String creditCardNo) {
        
        if(flights.containsKey(flightId)){
            //issueTicket();
            if(isCreditCardValid(creditCardNo)){
                return "Booking Success";
            }
            else{
                return "Credit card invalid";
            }
        }
        else{
            return "You book the wrong flight";
        }
    }

    /**
     * Web service operation
     */
    @WebMethod(operationName = "issueTicket")
    public String issueTicket() {
        return "ticket Issued";
    }

    
}

class Flight{
    public String from;
    public String to;
    public LocalDate date;
    public int price;
    
    public Flight(String inputFrom, String inputTo, LocalDate inputDate, int inputPrice){
        from = inputFrom;
        to = inputTo;
        date = inputDate;
        price = inputPrice;
    }
    
    public String getFrom(){
        return from;
    }
    
    public String getTo(){
        return to;
    }
    
    public LocalDate getDate(){
        return date;
    }
    
    public int getPrice(){
        return price;
    }
}